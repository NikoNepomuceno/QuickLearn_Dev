// Quiz service for handling quiz operations like download, share, etc.

// export function downloadQuizAsJSON(quiz) {
//   const quizData = {
//     title: quiz.title,
//     description: quiz.description,
//     questions: quiz.questions,
//     generatedAt: new Date().toISOString(),
//     version: '1.0'
//   }
  
//   const dataStr = JSON.stringify(quizData, null, 2)
//   const dataBlob = new Blob([dataStr], { type: 'application/json' })
  
//   const link = document.createElement('a')
//   link.href = URL.createObjectURL(dataBlob)
//   link.download = `${quiz.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_quiz.json`
//   document.body.appendChild(link)
//   link.click()
//   document.body.removeChild(link)
//   URL.revokeObjectURL(link.href)
// }

export function downloadQuizAsPDF(quiz) {
  // For now, we'll create a simple text-based PDF using the browser's print functionality
  // In a production app, you might want to use a library like jsPDF or Puppeteer
  
  const printWindow = window.open('', '_blank')
  const htmlContent = generateQuizHTML(quiz)
  
  printWindow.document.write(htmlContent)
  printWindow.document.close()
  
  // Wait for content to load, then trigger print
  printWindow.onload = () => {
    setTimeout(() => {
      printWindow.print()
      printWindow.close()
    }, 500)
  }
}

function generateQuizHTML(quiz) {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${quiz.title}</title>
      <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1 { color: #333; border-bottom: 2px solid #667eea; padding-bottom: 10px; }
        .description { color: #666; margin-bottom: 30px; }
        .question { margin-bottom: 25px; padding: 15px; border: 1px solid #ddd; border-radius: 8px; }
        .question-number { font-weight: bold; color: #667eea; }
        .choices { margin: 10px 0; }
        .choice { margin: 5px 0; }
        .answer { margin-top: 10px; padding: 10px; background: #f0f8ff; border-radius: 5px; }
        .explanation { margin-top: 5px; font-style: italic; color: #666; }
        @media print { body { margin: 0; } }
      </style>
    </head>
    <body>
      <h1>${quiz.title}</h1>
      <p class="description">${quiz.description}</p>
      
      ${quiz.questions.map((question, index) => `
        <div class="question">
          <div class="question-number">Question ${index + 1}:</div>
          <div>${question.question}</div>
          <div class="choices">
            ${question.choices.map(choice => `<div class="choice">â€¢ ${choice}</div>`).join('')}
          </div>
          <div class="answer">
            <strong>Answer:</strong> ${question.answer}
            ${question.explanation ? `<div class="explanation"><strong>Explanation:</strong> ${question.explanation}</div>` : ''}
          </div>
        </div>
      `).join('')}
      
      <div style="margin-top: 40px; text-align: center; color: #666; font-size: 12px;">
        Generated by QuickLearn on ${new Date().toLocaleDateString()}
      </div>
    </body>
    </html>
  `
}

export function generateShareableLink(quiz) {
  // Generate a unique ID for the quiz
  const quizId = generateQuizId()
  
  // Store quiz in localStorage with the ID (in a real app, this would be stored on a server)
  const quizData = {
    ...quiz,
    id: quizId,
    createdAt: new Date().toISOString()
  }
  
  localStorage.setItem(`quiz_${quizId}`, JSON.stringify(quizData))
  
  // Generate the shareable link
  const baseUrl = window.location.origin
  const shareableLink = `${baseUrl}/quiz/${quizId}`
  
  return shareableLink
}

export function getQuizById(quizId) {
  const quizData = localStorage.getItem(`quiz_${quizId}`)
  return quizData ? JSON.parse(quizData) : null
}

function generateQuizId() {
  // Generate a simple unique ID (in production, use a proper UUID library)
  return Math.random().toString(36).substr(2, 9) + Date.now().toString(36)
}

export function copyToClipboard(text) {
  if (navigator.clipboard && window.isSecureContext) {
    return navigator.clipboard.writeText(text)
  } else {
    // Fallback for older browsers
    const textArea = document.createElement('textarea')
    textArea.value = text
    textArea.style.position = 'fixed'
    textArea.style.left = '-999999px'
    textArea.style.top = '-999999px'
    document.body.appendChild(textArea)
    textArea.focus()
    textArea.select()
    
    return new Promise((resolve, reject) => {
      if (document.execCommand('copy')) {
        resolve()
      } else {
        reject(new Error('Unable to copy to clipboard'))
      }
      document.body.removeChild(textArea)
    })
  }
}

