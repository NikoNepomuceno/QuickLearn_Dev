import jsPDF from 'jspdf'
import { saveAs } from 'file-saver'

/**
 * Export service for generating PDF and DOCX files from summary data
 */
class ExportService {
  /**
   * Generate and download PDF from summary data
   * @param {Object} summary - Summary data object
   * @param {string} filename - Optional filename (without extension)
   */
  static async exportToPDF(summary, filename = 'summary') {
    try {
      const doc = new jsPDF()
      const pageWidth = doc.internal.pageSize.getWidth()
      const margin = 20
      const contentWidth = pageWidth - (margin * 2)
      let yPosition = margin

      // Helper function to add text with word wrapping
      const addText = (text, fontSize = 12, isBold = false, color = '#000000') => {
        doc.setFontSize(fontSize)
        doc.setFont('helvetica', isBold ? 'bold' : 'normal')
        doc.setTextColor(color)
        
        const lines = doc.splitTextToSize(text, contentWidth)
        doc.text(lines, margin, yPosition)
        yPosition += (lines.length * fontSize * 0.4) + 5
      }

      // Helper function to add a section break
      const addSectionBreak = () => {
        yPosition += 10
        if (yPosition > doc.internal.pageSize.getHeight() - 30) {
          doc.addPage()
          yPosition = margin
        }
      }

      // Title
      if (summary.title) {
        addText(summary.title, 18, true, '#2c3e50')
        addSectionBreak()
      }

      // Description
      if (summary.description) {
        addText(summary.description, 12, false, '#7f8c8d')
        addSectionBreak()
      }

      // Key Points
      if (summary.keyPoints && summary.keyPoints.length > 0) {
        addText('Key Points', 14, true, '#34495e')
        addSectionBreak()
        
        summary.keyPoints.forEach((point, index) => {
          addText(`${index + 1}. ${point}`, 11, false, '#2c3e50')
        })
        addSectionBreak()
      }

      // Sections
      if (summary.sections && summary.sections.length > 0) {
        summary.sections.forEach(section => {
          addText(section.title, 14, true, '#34495e')
          addSectionBreak()
          
          if (section.content) {
            addText(section.content, 11, false, '#2c3e50')
            addSectionBreak()
          }
          
          if (section.subpoints && section.subpoints.length > 0) {
            section.subpoints.forEach(subpoint => {
              addText(`• ${subpoint}`, 10, false, '#7f8c8d')
            })
            addSectionBreak()
          }
        })
      }

      // Conclusions
      if (summary.conclusions && summary.conclusions.length > 0) {
        addText('Key Takeaways', 14, true, '#34495e')
        addSectionBreak()
        
        summary.conclusions.forEach((conclusion, index) => {
          addText(`${index + 1}. ${conclusion}`, 11, false, '#2c3e50')
        })
      }

      // Add footer
      const pageCount = doc.internal.getNumberOfPages()
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i)
        doc.setFontSize(8)
        doc.setTextColor('#95a5a6')
        doc.text(
          `Generated by QuickLearn - Page ${i} of ${pageCount}`,
          margin,
          doc.internal.pageSize.getHeight() - 10
        )
      }

      // Save the PDF
      doc.save(`${filename}.pdf`)
      
      return true
    } catch (error) {
      console.error('Error generating PDF:', error)
      throw new Error('Failed to generate PDF')
    }
  }

  /**
   * Generate and download DOCX from summary data
   * @param {Object} summary - Summary data object
   * @param {string} filename - Optional filename (without extension)
   */
  static async exportToDOCX(summary, filename = 'summary') {
    try {
      // Create HTML content that can be opened in Word
      let htmlContent = `
        <!DOCTYPE html>
        <html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">
        <head>
          <meta charset="UTF-8">
          <meta name="ProgId" content="Word.Document">
          <meta name="Generator" content="Microsoft Word 15">
          <meta name="Originator" content="Microsoft Word 15">
          <title>${summary.title || 'Summary'}</title>
          <style>
            body { font-family: 'Calibri', Arial, sans-serif; margin: 40px; line-height: 1.6; }
            h1 { color: #2c3e50; font-size: 24px; margin-bottom: 20px; }
            h2 { color: #34495e; font-size: 18px; margin-top: 30px; margin-bottom: 15px; }
            p { color: #2c3e50; margin-bottom: 15px; }
            .description { color: #7f8c8d; font-style: italic; margin-bottom: 25px; }
            ul { margin-left: 20px; }
            li { margin-bottom: 8px; color: #2c3e50; }
            .footer { text-align: center; color: #95a5a6; font-style: italic; margin-top: 40px; }
          </style>
        </head>
        <body>
      `

      // Title
      if (summary.title) {
        htmlContent += `<h1>${summary.title}</h1>`
      }

      // Description
      if (summary.description) {
        htmlContent += `<p class="description">${summary.description}</p>`
      }

      // Key Points
      if (summary.keyPoints && summary.keyPoints.length > 0) {
        htmlContent += `<h2>Key Points</h2><ul>`
        summary.keyPoints.forEach(point => {
          htmlContent += `<li>${point}</li>`
        })
        htmlContent += `</ul>`
      }

      // Sections
      if (summary.sections && summary.sections.length > 0) {
        summary.sections.forEach(section => {
          htmlContent += `<h2>${section.title}</h2>`
          if (section.content) {
            htmlContent += `<p>${section.content}</p>`
          }
          if (section.subpoints && section.subpoints.length > 0) {
            htmlContent += `<ul>`
            section.subpoints.forEach(subpoint => {
              htmlContent += `<li>${subpoint}</li>`
            })
            htmlContent += `</ul>`
          }
        })
      }

      // Conclusions
      if (summary.conclusions && summary.conclusions.length > 0) {
        htmlContent += `<h2>Key Takeaways</h2><ul>`
        summary.conclusions.forEach(conclusion => {
          htmlContent += `<li>${conclusion}</li>`
        })
        htmlContent += `</ul>`
      }

      // Footer
      htmlContent += `<div class="footer">Generated by QuickLearn</div>`
      htmlContent += `</body></html>`

      // Create a blob with the HTML content
      const blob = new Blob([htmlContent], { 
        type: 'application/msword' 
      })
      
      saveAs(blob, `${filename}.doc`)
      
      return true
    } catch (error) {
      console.error('Error generating DOCX:', error)
      throw new Error('Failed to generate DOCX')
    }
  }

  /**
   * Generate and download TXT from summary data
   * @param {Object} summary - Summary data object
   * @param {string} filename - Optional filename (without extension)
   */
  static exportToTXT(summary, filename = 'summary') {
    try {
      let content = ''

      // Title
      if (summary.title) {
        content += `${summary.title}\n`
        content += '='.repeat(summary.title.length) + '\n\n'
      }

      // Description
      if (summary.description) {
        content += `${summary.description}\n\n`
      }

      // Key Points
      if (summary.keyPoints && summary.keyPoints.length > 0) {
        content += 'KEY POINTS\n'
        content += '-'.repeat(10) + '\n\n'
        
        summary.keyPoints.forEach((point, index) => {
          content += `${index + 1}. ${point}\n`
        })
        content += '\n'
      }

      // Sections
      if (summary.sections && summary.sections.length > 0) {
        summary.sections.forEach(section => {
          content += `${section.title.toUpperCase()}\n`
          content += '-'.repeat(section.title.length) + '\n\n'
          
          if (section.content) {
            content += `${section.content}\n\n`
          }
          
          if (section.subpoints && section.subpoints.length > 0) {
            section.subpoints.forEach(subpoint => {
              content += `• ${subpoint}\n`
            })
            content += '\n'
          }
        })
      }

      // Conclusions
      if (summary.conclusions && summary.conclusions.length > 0) {
        content += 'KEY TAKEAWAYS\n'
        content += '-'.repeat(13) + '\n\n'
        
        summary.conclusions.forEach((conclusion, index) => {
          content += `${index + 1}. ${conclusion}\n`
        })
        content += '\n'
      }

      // Footer
      content += '\n' + '='.repeat(50) + '\n'
      content += 'Generated by QuickLearn\n'
      content += '='.repeat(50)

      // Create and download file
      const blob = new Blob([content], { type: 'text/plain;charset=utf-8' })
      saveAs(blob, `${filename}.txt`)
      
      return true
    } catch (error) {
      console.error('Error generating TXT:', error)
      throw new Error('Failed to generate TXT')
    }
  }
}

export default ExportService
